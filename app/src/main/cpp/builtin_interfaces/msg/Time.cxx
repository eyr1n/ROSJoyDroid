// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Time.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Time.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace builtin_interfaces {

namespace msg {



Time::Time()
{
}

Time::~Time()
{
}

Time::Time(
        const Time& x)
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
}

Time::Time(
        Time&& x) noexcept
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
}

Time& Time::operator =(
        const Time& x)
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    return *this;
}

Time& Time::operator =(
        Time&& x) noexcept
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    return *this;
}

bool Time::operator ==(
        const Time& x) const
{
    return (m_sec == x.m_sec &&
           m_nanosec == x.m_nanosec);
}

bool Time::operator !=(
        const Time& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member sec
 * @param _sec New value for member sec
 */
void Time::sec(
        int32_t _sec)
{
    m_sec = _sec;
}

/*!
 * @brief This function returns the value of member sec
 * @return Value of member sec
 */
int32_t Time::sec() const
{
    return m_sec;
}

/*!
 * @brief This function returns a reference to member sec
 * @return Reference to member sec
 */
int32_t& Time::sec()
{
    return m_sec;
}


/*!
 * @brief This function sets a value in member nanosec
 * @param _nanosec New value for member nanosec
 */
void Time::nanosec(
        uint32_t _nanosec)
{
    m_nanosec = _nanosec;
}

/*!
 * @brief This function returns the value of member nanosec
 * @return Value of member nanosec
 */
uint32_t Time::nanosec() const
{
    return m_nanosec;
}

/*!
 * @brief This function returns a reference to member nanosec
 * @return Reference to member nanosec
 */
uint32_t& Time::nanosec()
{
    return m_nanosec;
}




} // namespace msg


} // namespace builtin_interfaces
// Include auxiliary functions like for serializing/deserializing.
#include "TimeCdrAux.ipp"

